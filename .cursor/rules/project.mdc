---
description: 
globs: 
alwaysApply: false
---
Next.jsの原則

1. コア原則
	•	App Router を標準採用
	•	TypeScript 必須（ESLint, 型エラーは常にゼロ）
	•	API Routes は使用しない。あらゆるサーバー処理は Server Actions で実装

2. ディレクトリレイアウト

app/                  ルーティング & ページ  
components/ui/        shadcn/ui コンポーネント
components/layout/    レイアウト関連コンポーネント
components/sections/  ページセクションコンポーネント
components/features/  機能別コンポーネント
components/common/    共通コンポーネント
lib/                  ユーティリティ関数  
stories/              Storybookで作成したストーリー関連
hooks/                カスタムフック  
types/                型定義
constants/            定数
config/               設定値・環境変数ラッパー  
services/             外部 API ラッパーやビジネスロジック  
demo/                 フロントエンドから実行できる手動テストページ

	•	専用（機能固有）コンポーネント … 対応する page.tsx と同階層
	•	汎用（再利用可能）コンポーネント … components/ に配置

3. データハンドリング

依存条件	実装方法
ユーザー操作に依存しない	server components + Server Actions
ユーザー操作に依存する	client components + Server Actions + useSWR

4. 表示と状態管理
	•	UI は極力自作せず、必ず shadcn/ui のコンポーネントを利用

5. パフォーマンス
	•	use client / useEffect / useState は最小限、まず RSC

6. フォームとバリデーション
	•	制御コンポーネント + react-hook-form
	•	クライアント／サーバー両方で入力チェック

7. 品質・セキュリティ・テスト

7-1 エラーハンドリング
	•	ガード節で 早期 return、成功パスは最後にまとめる

7-2 アクセシビリティ
	•	セマンティック HTML + ARIA、キーボード操作サポート

7-3 Server Actions のセキュリティ指針
	•	ユーザーが許可された操作だけを Server Action として実装
	•	汎用的・多目的なサーバー関数は実装しない

7-4 テスト
	•	demo/ ディレクトリ に UI ベースのテストページを配置し、
すべての Server Actions・クライアント関数を ブラウザ経由で手動検証 できるようにする

8. デプロイ
	•Gitでのコミット&プッシュはdoc/git-flow.mdに従う